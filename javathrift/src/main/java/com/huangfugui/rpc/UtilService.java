/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.huangfugui.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-09")
public class UtilService {

  public interface Iface {

    public java.util.List<java.lang.Integer> primeNumber(long callTime, java.lang.String cliInfo, int threshold) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void primeNumber(long callTime, java.lang.String cliInfo, int threshold, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<java.lang.Integer> primeNumber(long callTime, java.lang.String cliInfo, int threshold) throws org.apache.thrift.TException
    {
      send_primeNumber(callTime, cliInfo, threshold);
      return recv_primeNumber();
    }

    public void send_primeNumber(long callTime, java.lang.String cliInfo, int threshold) throws org.apache.thrift.TException
    {
      primeNumber_args args = new primeNumber_args();
      args.setCallTime(callTime);
      args.setCliInfo(cliInfo);
      args.setThreshold(threshold);
      sendBase("primeNumber", args);
    }

    public java.util.List<java.lang.Integer> recv_primeNumber() throws org.apache.thrift.TException
    {
      primeNumber_result result = new primeNumber_result();
      receiveBase(result, "primeNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "primeNumber failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void primeNumber(long callTime, java.lang.String cliInfo, int threshold, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      primeNumber_call method_call = new primeNumber_call(callTime, cliInfo, threshold, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class primeNumber_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
      private long callTime;
      private java.lang.String cliInfo;
      private int threshold;
      public primeNumber_call(long callTime, java.lang.String cliInfo, int threshold, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.callTime = callTime;
        this.cliInfo = cliInfo;
        this.threshold = threshold;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("primeNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        primeNumber_args args = new primeNumber_args();
        args.setCallTime(callTime);
        args.setCliInfo(cliInfo);
        args.setThreshold(threshold);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_primeNumber();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("primeNumber", new primeNumber());
      return processMap;
    }

    public static class primeNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, primeNumber_args> {
      public primeNumber() {
        super("primeNumber");
      }

      public primeNumber_args getEmptyArgsInstance() {
        return new primeNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public primeNumber_result getResult(I iface, primeNumber_args args) throws org.apache.thrift.TException {
        primeNumber_result result = new primeNumber_result();
        result.success = iface.primeNumber(args.callTime, args.cliInfo, args.threshold);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("primeNumber", new primeNumber());
      return processMap;
    }

    public static class primeNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, primeNumber_args, java.util.List<java.lang.Integer>> {
      public primeNumber() {
        super("primeNumber");
      }

      public primeNumber_args getEmptyArgsInstance() {
        return new primeNumber_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() { 
          public void onComplete(java.util.List<java.lang.Integer> o) {
            primeNumber_result result = new primeNumber_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            primeNumber_result result = new primeNumber_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, primeNumber_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.primeNumber(args.callTime, args.cliInfo, args.threshold,resultHandler);
      }
    }

  }

  public static class primeNumber_args implements org.apache.thrift.TBase<primeNumber_args, primeNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<primeNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("primeNumber_args");

    private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLI_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cliInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new primeNumber_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new primeNumber_argsTupleSchemeFactory();

    public long callTime; // required
    public java.lang.String cliInfo; // required
    public int threshold; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALL_TIME((short)1, "callTime"),
      CLI_INFO((short)2, "cliInfo"),
      THRESHOLD((short)3, "threshold");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALL_TIME
            return CALL_TIME;
          case 2: // CLI_INFO
            return CLI_INFO;
          case 3: // THRESHOLD
            return THRESHOLD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALLTIME_ISSET_ID = 0;
    private static final int __THRESHOLD_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLI_INFO, new org.apache.thrift.meta_data.FieldMetaData("cliInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(primeNumber_args.class, metaDataMap);
    }

    public primeNumber_args() {
    }

    public primeNumber_args(
      long callTime,
      java.lang.String cliInfo,
      int threshold)
    {
      this();
      this.callTime = callTime;
      setCallTimeIsSet(true);
      this.cliInfo = cliInfo;
      this.threshold = threshold;
      setThresholdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public primeNumber_args(primeNumber_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.callTime = other.callTime;
      if (other.isSetCliInfo()) {
        this.cliInfo = other.cliInfo;
      }
      this.threshold = other.threshold;
    }

    public primeNumber_args deepCopy() {
      return new primeNumber_args(this);
    }

    @Override
    public void clear() {
      setCallTimeIsSet(false);
      this.callTime = 0;
      this.cliInfo = null;
      setThresholdIsSet(false);
      this.threshold = 0;
    }

    public long getCallTime() {
      return this.callTime;
    }

    public primeNumber_args setCallTime(long callTime) {
      this.callTime = callTime;
      setCallTimeIsSet(true);
      return this;
    }

    public void unsetCallTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCallTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    public void setCallTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
    }

    public java.lang.String getCliInfo() {
      return this.cliInfo;
    }

    public primeNumber_args setCliInfo(java.lang.String cliInfo) {
      this.cliInfo = cliInfo;
      return this;
    }

    public void unsetCliInfo() {
      this.cliInfo = null;
    }

    /** Returns true if field cliInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCliInfo() {
      return this.cliInfo != null;
    }

    public void setCliInfoIsSet(boolean value) {
      if (!value) {
        this.cliInfo = null;
      }
    }

    public int getThreshold() {
      return this.threshold;
    }

    public primeNumber_args setThreshold(int threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
      return this;
    }

    public void unsetThreshold() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CALL_TIME:
        if (value == null) {
          unsetCallTime();
        } else {
          setCallTime((java.lang.Long)value);
        }
        break;

      case CLI_INFO:
        if (value == null) {
          unsetCliInfo();
        } else {
          setCliInfo((java.lang.String)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALL_TIME:
        return getCallTime();

      case CLI_INFO:
        return getCliInfo();

      case THRESHOLD:
        return getThreshold();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALL_TIME:
        return isSetCallTime();
      case CLI_INFO:
        return isSetCliInfo();
      case THRESHOLD:
        return isSetThreshold();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof primeNumber_args)
        return this.equals((primeNumber_args)that);
      return false;
    }

    public boolean equals(primeNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callTime = true;
      boolean that_present_callTime = true;
      if (this_present_callTime || that_present_callTime) {
        if (!(this_present_callTime && that_present_callTime))
          return false;
        if (this.callTime != that.callTime)
          return false;
      }

      boolean this_present_cliInfo = true && this.isSetCliInfo();
      boolean that_present_cliInfo = true && that.isSetCliInfo();
      if (this_present_cliInfo || that_present_cliInfo) {
        if (!(this_present_cliInfo && that_present_cliInfo))
          return false;
        if (!this.cliInfo.equals(that.cliInfo))
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(callTime);

      hashCode = hashCode * 8191 + ((isSetCliInfo()) ? 131071 : 524287);
      if (isSetCliInfo())
        hashCode = hashCode * 8191 + cliInfo.hashCode();

      hashCode = hashCode * 8191 + threshold;

      return hashCode;
    }

    @Override
    public int compareTo(primeNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCliInfo()).compareTo(other.isSetCliInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCliInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cliInfo, other.cliInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("primeNumber_args(");
      boolean first = true;

      sb.append("callTime:");
      sb.append(this.callTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cliInfo:");
      if (this.cliInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.cliInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class primeNumber_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public primeNumber_argsStandardScheme getScheme() {
        return new primeNumber_argsStandardScheme();
      }
    }

    private static class primeNumber_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<primeNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, primeNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALL_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.callTime = iprot.readI64();
                struct.setCallTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLI_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cliInfo = iprot.readString();
                struct.setCliInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.threshold = iprot.readI32();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, primeNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
        oprot.writeI64(struct.callTime);
        oprot.writeFieldEnd();
        if (struct.cliInfo != null) {
          oprot.writeFieldBegin(CLI_INFO_FIELD_DESC);
          oprot.writeString(struct.cliInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.threshold);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class primeNumber_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public primeNumber_argsTupleScheme getScheme() {
        return new primeNumber_argsTupleScheme();
      }
    }

    private static class primeNumber_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<primeNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, primeNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallTime()) {
          optionals.set(0);
        }
        if (struct.isSetCliInfo()) {
          optionals.set(1);
        }
        if (struct.isSetThreshold()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCallTime()) {
          oprot.writeI64(struct.callTime);
        }
        if (struct.isSetCliInfo()) {
          oprot.writeString(struct.cliInfo);
        }
        if (struct.isSetThreshold()) {
          oprot.writeI32(struct.threshold);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, primeNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.callTime = iprot.readI64();
          struct.setCallTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cliInfo = iprot.readString();
          struct.setCliInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.threshold = iprot.readI32();
          struct.setThresholdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class primeNumber_result implements org.apache.thrift.TBase<primeNumber_result, primeNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<primeNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("primeNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new primeNumber_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new primeNumber_resultTupleSchemeFactory();

    public java.util.List<java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(primeNumber_result.class, metaDataMap);
    }

    public primeNumber_result() {
    }

    public primeNumber_result(
      java.util.List<java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public primeNumber_result(primeNumber_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success);
        this.success = __this__success;
      }
    }

    public primeNumber_result deepCopy() {
      return new primeNumber_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Integer>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Integer> getSuccess() {
      return this.success;
    }

    public primeNumber_result setSuccess(java.util.List<java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof primeNumber_result)
        return this.equals((primeNumber_result)that);
      return false;
    }

    public boolean equals(primeNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(primeNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("primeNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class primeNumber_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public primeNumber_resultStandardScheme getScheme() {
        return new primeNumber_resultStandardScheme();
      }
    }

    private static class primeNumber_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<primeNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, primeNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Integer>(_list10.size);
                  int _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = iprot.readI32();
                    struct.success.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, primeNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter13 : struct.success)
            {
              oprot.writeI32(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class primeNumber_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public primeNumber_resultTupleScheme getScheme() {
        return new primeNumber_resultTupleScheme();
      }
    }

    private static class primeNumber_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<primeNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, primeNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter14 : struct.success)
            {
              oprot.writeI32(_iter14);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, primeNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Integer>(_list15.size);
            int _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readI32();
              struct.success.add(_elem16);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
